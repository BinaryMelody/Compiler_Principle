global_array	a_global	size	400	initial	
global_array	v_global	size	400	initial	
global_array	c_global	size	400	initial	
global_array	b_global	size	400	initial	
global_int	s_global	initial	0
global_int	n_global	initial	0

print_global:
local_int	i	stack_offset	8
mov	1		#0
mov	#0		i

print_global_for_cond_a:
mov	i		#0
mov	n		#1
slt	#0	#1	#2
ifFalse	#2	goto	print_global_for_end_a
mov	0		#0
mov	i		#2
mov	100		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	b	#0	#0
write

print_global_for_incr_a:
mov	i		#0
inc	#0		#0
mov	#0		i
jmp	print_global_for_cond_a

print_global_for_end_a:
mov	0		#0
mov	n		#2
mov	100		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	b	#0	#0
write
mov	0		#0
return	#0

#print_global_end:

DFS_global:
local_int	i	stack_offset	8
local_int	j	stack_offset	12
local_int	k	stack_offset	16
mov	x		#0
mov	n		#1
sgt	#0	#1	#2
ifFalse	#2	goto	DFS_global_endif_a
mov	s		#0
mov	3		#1
slt	#0	#1	#2
ifFalse	#2	goto	DFS_global_endif_b
call	print_global	

DFS_global_endif_b:
mov	s		#0
inc	#0		#0
mov	#0		s
mov	0		#0
return	#0

DFS_global_endif_a:
mov	1		#0
mov	#0		i

DFS_global_for_cond_c:
mov	i		#0
mov	n		#1
mov	1		#2
add	#1	#2	#3
slt	#0	#3	#1
ifFalse	#1	goto	DFS_global_for_end_c
mov	0		#0
mov	i		#2
mov	100		#1
mul	#0	#0	#1
add	#0	#0	#2
mov	4		#1
mul	#0	#0	#1
mov_arr	a	#0	#0
logi_not	#0		#0
mov	#8		#1
ifFalse	#8	goto	DFS_global_shortcircuit_e
mov	0		#2
mov	i		#4
mov	x		#5
add	#4	#5	#6
mov	100		#3
mul	#2	#2	#3
add	#2	#2	#6
mov	4		#3
mul	#2	#2	#3
mov_arr	v	#2	#2
logi_not	#2		#2
mov	#10		#1

DFS_global_shortcircuit_e:
mov	#9		#0
ifFalse	#9	goto	DFS_global_shortcircuit_f
mov	0		#2
mov	i		#4
mov	x		#5
sub	#4	#5	#6
mov	15		#4
add	#6	#4	#5
mov	100		#3
mul	#2	#2	#3
add	#2	#2	#5
mov	4		#3
mul	#2	#2	#3
mov_arr	c	#2	#2
logi_not	#2		#2
mov	#10		#0

DFS_global_shortcircuit_f:
ifFalse	#0	goto	DFS_global_endif_d
mov	1		#0
mov	0		#1
mov	i		#3
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#3
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	a	
mov	1		#0
mov	0		#1
mov	i		#3
mov	x		#4
add	#3	#4	#5
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#5
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	v	
mov	1		#0
mov	0		#1
mov	i		#3
mov	x		#4
sub	#3	#4	#5
mov	15		#3
add	#5	#3	#4
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#4
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	c	
mov	i		#0
mov	0		#1
mov	x		#3
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#3
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	b	
mov	x		#0
mov	1		#1
add	#0	#1	#2
call	DFS_global	
mov	0		#0
mov	0		#1
mov	i		#3
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#3
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	a	
mov	0		#0
mov	0		#1
mov	i		#3
mov	x		#4
add	#3	#4	#5
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#5
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	v	
mov	0		#0
mov	0		#1
mov	i		#3
mov	x		#4
sub	#3	#4	#5
mov	15		#3
add	#5	#3	#4
mov	100		#2
mul	#1	#1	#2
add	#1	#1	#4
mov	4		#2
mul	#1	#1	#2
mov_arr	#1	#1	c	

DFS_global_endif_d:

DFS_global_for_incr_c:
mov	i		#0
inc	#0		#0
mov	#0		i
jmp	DFS_global_for_cond_c

DFS_global_for_end_c:
mov	0		#0
return	#0

#DFS_global_end:

main:
read
mov	1		#0
call	DFS_global	
mov	s		#0
write
mov	0		#0
return	#0

#main_end:
